The code is in three modules:
  engine.ml/engine.mli:  
    Contains the basic game mechanism (cards, slots, moves, etc)
  strategy.ml/strategy.mli:
    The KI of the game.
  main.ml:
    The main method


The strategy is implemented as priority based task queues.  A task is
a list of instructions, which can be simple moves or arbitrary ocaml code.

On the task queue with the highest priority sits the reviver task.  It 
checks if there is a dead register that is in use and revives it.  This is
done by getting an arbitrary free register and reviving it.

The main task proceeds as follows:
  1. attack slot 255 of opponent to get a place to put a zombie.
  2. put a zombie into this slot.
     the zombie will first kill register 0 (with the help command)
     then it installs a ping-pong zombie in my slots, that will 
     automatically reinstall a zombie.  The zombie keeps register 0 dead.
  3. Install a watchdog that checks if the ping-pong zombie dies for some 
     reason and reinstalls it.
  4. Kill all other slots of the opponent one by one.  This is done by
     another zombie that uses the help command.


The core feature is the ping-pong zombie:  The zombie does (inc 0) to keep
that register dead, then installs a zombie in my slots that installs the
zombie back. This way the zombie will keep itself running and my program
is free to do other evil things.

Possible defenses:
  - prevent that the zombie is installed in the first place (hard but doable)
  - revive slot 0 and immediately do a help on it by a single command
    (possible, but needs advanced operations to build a complicated command
     without register 0).


The Strategies module should also make it easy to program new strategies.
To execute a complicated command it is enough to use the task
 Code(set_card 1 (complicated command))
